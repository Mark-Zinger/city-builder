/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import GameEntityType from "../types/GameEntityType";
import EntityWrapper from "../hoc/EntityWrapper";

type GLTFResult = any & GLTF & {
  nodes: {
    Park_Mesh: THREE.Mesh
    Park_Mesh_1: THREE.Mesh
    Park_Mesh_2: THREE.Mesh
    Park_Mesh_3: THREE.Mesh
    Park_Mesh_4: THREE.Mesh
    Park_Mesh_5: THREE.Mesh
    Park_Mesh_6: THREE.Mesh
    Park_Mesh_7: THREE.Mesh
    Park_Mesh_8: THREE.Mesh
    Park_Mesh_9: THREE.Mesh
    Park_Mesh_10: THREE.Mesh
    Park_Mesh_11: THREE.Mesh
    Park_Mesh_12: THREE.Mesh
    Park_Mesh_13: THREE.Mesh
    Park_Mesh_14: THREE.Mesh
    Park_Mesh_15: THREE.Mesh
    Park_Mesh_16: THREE.Mesh
    Park_Mesh_17: THREE.Mesh
    Park_Mesh_18: THREE.Mesh
    Park_Mesh_19: THREE.Mesh
    Park_Mesh_20: THREE.Mesh
  }
  materials: {
    material_48: THREE.MeshStandardMaterial
    ['material.004']: THREE.MeshStandardMaterial
    material_3: THREE.MeshStandardMaterial
    material_4: THREE.MeshStandardMaterial
    material_5: THREE.MeshStandardMaterial
    material_7: THREE.MeshStandardMaterial
    material_9: THREE.MeshStandardMaterial
    material_34: THREE.MeshStandardMaterial
    material_36: THREE.MeshStandardMaterial
    material_39: THREE.MeshStandardMaterial
    ['material.005']: THREE.MeshStandardMaterial
    material_42: THREE.MeshStandardMaterial
    material_43: THREE.MeshStandardMaterial
    material_46: THREE.MeshStandardMaterial
    material_47: THREE.MeshStandardMaterial
    ['material.006']: THREE.MeshStandardMaterial
    ['material.007']: THREE.MeshStandardMaterial
    material_55: THREE.MeshStandardMaterial
    material_59: THREE.MeshStandardMaterial
    ['material.008']: THREE.MeshStandardMaterial
    ['material.009']: THREE.MeshStandardMaterial
  }
}

export default function Park(props: GameEntityType) {
  const { nodes, materials } = useGLTF('/assets/park.glb') as GLTFResult
  return (
    <EntityWrapper {...props}>
      <group rotation={[-Math.PI, 0, 0]} scale={[0.00114, 0.0012, 0.00132]} position={[0.19,0,0.1]}>
        <mesh geometry={nodes.Park_Mesh.geometry} material={materials.material_48} />
        <mesh geometry={nodes.Park_Mesh_1.geometry} material={materials['material.004']} />
        <mesh geometry={nodes.Park_Mesh_2.geometry} material={materials.material_3} />
        <mesh geometry={nodes.Park_Mesh_3.geometry} material={materials.material_4} />
        <mesh geometry={nodes.Park_Mesh_4.geometry} material={materials.material_5} />
        <mesh geometry={nodes.Park_Mesh_5.geometry} material={materials.material_7} />
        <mesh geometry={nodes.Park_Mesh_6.geometry} material={materials.material_9} />
        <mesh geometry={nodes.Park_Mesh_7.geometry} material={materials.material_34} />
        <mesh geometry={nodes.Park_Mesh_8.geometry} material={materials.material_36} />
        <mesh geometry={nodes.Park_Mesh_9.geometry} material={materials.material_39} />
        <mesh geometry={nodes.Park_Mesh_10.geometry} material={materials['material.005']} />
        <mesh geometry={nodes.Park_Mesh_11.geometry} material={materials.material_42} />
        <mesh geometry={nodes.Park_Mesh_12.geometry} material={materials.material_43} />
        <mesh geometry={nodes.Park_Mesh_13.geometry} material={materials.material_46} />
        <mesh geometry={nodes.Park_Mesh_14.geometry} material={materials.material_47} />
        <mesh geometry={nodes.Park_Mesh_15.geometry} material={materials['material.006']} />
        <mesh geometry={nodes.Park_Mesh_16.geometry} material={materials['material.007']} />
        <mesh geometry={nodes.Park_Mesh_17.geometry} material={materials.material_55} />
        <mesh geometry={nodes.Park_Mesh_18.geometry} material={materials.material_59} />
        <mesh geometry={nodes.Park_Mesh_19.geometry} material={materials['material.008']} />
        <mesh geometry={nodes.Park_Mesh_20.geometry} material={materials['material.009']} />
      </group>
    </EntityWrapper>
  )
}

useGLTF.preload('/assets/park.glb')
